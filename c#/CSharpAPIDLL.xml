<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpAPIDLL</name>
    </assembly>
    <members>
        <member name="T:Attocube.API.Error.AlreadyConnectedException">
            <summary>
            Exception that is thrown if a the API_Connect method is called again, after it's been called already
            </summary>
        </member>
        <member name="M:Attocube.API.Error.AlreadyConnectedException.#ctor">
            <summary>
            Standard constructor which sets the default exception message
            </summary>
        </member>
        <member name="T:Attocube.API.Error.AttocubeAPIException">
            <summary>
            Base exception for all custom exceptions in the Attocube API library
            </summary>
        </member>
        <member name="F:Attocube.API.Error.AttocubeAPIException.ComErrorHighBytes">
            <summary>
            High bytes of the COM HResult generated by the Attocube.API system
            Error are returned as 0x8111yyyy where the "yyyy" stands for the internal error number
            </summary>
        </member>
        <member name="P:Attocube.API.Error.AttocubeAPIException.ErrorCode">
            <summary>
            Public property for the error code that this exception contains.
            This can be an internal error code (warning from 0x000 through 0x7FF, actual errors 0x800 through 0x1000)
            or it can be an interface-DLL related error as defined in the <seealso cref="T:Attocube.API.Error.ErrorCodes">ErrorCodes</seealso> class
            </summary>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor">
            <summary>
            Standard, parameter-less constructor
            </summary>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String)">
            <summary>
            Extended constructor which takes an exception message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String,System.Int32)">
            <summary>
            Extended constructor which takes an error code and an exception message 
            </summary>
            <param name="message">The exception message</param>
            <param name="errorCode">The numerical error code</param>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String,System.Exception)">
            <summary>
            Extended constructor which takes an exception message and a .NET inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The "inner" .NET exception to pass on</param>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Extended constructor which takes an exception message, an error code and a .NET inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="errorCode">The numerical error code</param>
            <param name="innerException">The "inner" .NET exception to pass on</param>
        </member>
        <member name="T:Attocube.API.Error.ErrorCodes">
            <summary>
            Attocube.API defined error codes
            </summary>
        </member>
        <member name="M:Attocube.API.Error.ErrorCodes.IsWarning(System.Int32)">
            <summary>
            Determines that this error code is really "only" a warning -> do not throw an exception, just return response as is
            </summary>
            <param name="errorCode">Error code to be checked</param>
            <returns>True, if this error code is simply a warning - false if not</returns>
        </member>
        <member name="M:Attocube.API.Error.ErrorCodes.IsError(System.Int32)">
            <summary>
            Determines that this error code truly is an error that necessitates throwing an exception
            </summary>
            <param name="errorCode">Error code to be checked</param>
            <returns>True, if this error code is in fact a "real" error - false if not</returns>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.DllAlreadyConnected">
            <summary>
            0x1001 - Client has already been connected 
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.DllNotConnected">
            <summary>
            0x1002 - Client is not yet connected
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcCallFailed">
            <summary>
            0x1003 - Something else in the process of the JSON RPC call went wrong
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseIsNull">
            <summary>
            0x1004 - Response from JSON RPC call is NULL
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseErrorAndResultNull">
            <summary>
            0x1005 - Call returned a response with both the .Error and
            .Result property as NULL 
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseResultIsNotAnArray">
            <summary>
            0x1006 - Call returned a response, but the .Result property 
            is not a valid JSON array
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseReturnsToFewArguments">
            <summary>
            0x1007 - Call returned a response, but the .Result property 
            is not a valid JSON array
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.TooFewArgumentsToCall">
            <summary>
            0x1007 - API call needs more arguments
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.NoError">
            <summary>
            Indicator for "all OK - no error"
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcParseError">
            <summary>
            JSON RPC 2.0 (-32700 / 0xFFFF8044): Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcInvalidRequest">
            <summary>
            JSON RPC 2.0 (-32600 / 0xFFFF80A8): The JSON sent is not a valid Request object.
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcMethodNotFound">
            <summary>
            JSON RPC 2.0 (-32601 / 0xFFFF80A7): The method does not exist / is not available.
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcInvalidParams">
            <summary>
            JSON RPC 2.0 (-32602 / 0xFFFF80A6): Invalid method parameter(s).
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcInternalError">
            <summary>
            JSON RPC 2.0 (-32603 / 0xFFFF80A5): Internal JSON-RPC error.
            </summary>
        </member>
        <member name="T:Attocube.API.Error.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_AlreadyConnected">
            <summary>
              Looks up a localized string similar to Attocube.API is already connected.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_BothResultAndErrorAreNull">
            <summary>
              Looks up a localized string similar to Both &apos;.Error&apos; *and* &apos;.Result&apos; are NULL.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_APISignalledError">
            <summary>
              Looks up a localized string similar to Embedded system signalled an error condition.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_InvalidIpAddress">
            <summary>
              Looks up a localized string similar to IP address is invalid.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_NotConnected">
            <summary>
              Looks up a localized string similar to Attocube.API is not yet connected.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_ResponseIsNull">
            <summary>
              Looks up a localized string similar to The response object is NULL.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_ResponseStreamIsNull">
            <summary>
              Looks up a localized string similar to Response Stream is NULL.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_ResultIsNotAnArray">
            <summary>
              Looks up a localized string similar to The &apos;.Result&apos; property is not a valid JSON array.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_TooFewArguments">
            <summary>
              Too few Arguments
            </summary>
        </member>
        <member name="T:Attocube.API.Error.NotConnectedException">
            <summary>
            Exception that is thrown if a method is being executed without the DLL being connected to a host system
            </summary>
        </member>
        <member name="M:Attocube.API.Error.NotConnectedException.#ctor">
            <summary>
            Standard constructor which sets the default exception message
            </summary>
        </member>
        <member name="T:Attocube.API.Utils.AssemblyInfoGetter">
            <summary>
            Helper class to determine the assembly metadata information
            </summary>
        </member>
        <member name="M:Attocube.API.Utils.AssemblyInfoGetter.GetAssemblyInfo">
            <summary>
                Gathers assembly info for the currently executing assembly (GetExecutingAssembly)
            </summary>
            <returns>Metadata information for the currently executing assembly</returns>       
        </member>
        <member name="M:Attocube.API.Utils.AssemblyInfoGetter.GetAssemblyInfo(System.Reflection.Assembly)">
            <summary>
                Gathers assembly info for the assembly being passed in as parameter
            </summary>
            <param name="assembly">Assembly to use for metadata discovery</param>
            <returns>Metadata information for this assembly</returns>
        </member>
        <member name="T:Attocube.API.Utils.AssemblyMetadata">
            <summary>
                Metadata class with the assembly information gathered
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Company">
            <summary>
                Company name
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Configuration">
            <summary>
                Assembly configuration
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Copyright">
            <summary>
                Copyright information
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Culture">
            <summary>
                "Culture" information
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Description">
            <summary>
                Description from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Product">
            <summary>
                Product information from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Title">
            <summary>
                Title from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Trademark">
            <summary>
                Trademark info from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Version2">
            <summary>
                Version number of the assembly, to level 2 (e.g. "2.21")
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Version3">
            <summary>
                Version number of the assembly, to level 3 (e.g. "2.21.4")
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Version4">
            <summary>
                Version number of the assembly, to level 4 (e.g. "2.21.4.5056")
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.CompleteVersion">
            <summary>
                Complete version info from assembly
            </summary>
        </member>
        <member name="T:Attocube.API.Data.DiscoveryData">
            <summary>
            Class for handling the data of devices discovered using the discovery protocol
            </summary>
        </member>
        <member name="M:Attocube.API.Data.DiscoveryData.#ctor">
            <summary>
            Default, parameter-less constructor
            </summary>
        </member>
        <member name="M:Attocube.API.Data.DiscoveryData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Extended constructor with all parameters needed to create this instance
            </summary>
            <param name="deviceName">Name setted by user setDeviceName</param>
            <param name="modelName">type of device</param>
            <param name="serialNumber">serial number</param>
            <param name="lockStatus">lock status (locked or unlocked)</param>
            <param name="ipAddress">ip address of the device</param>
            <param name="macAddress">mac address of the device</param>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.DeviceName">
            <summary>
            Name setted by user setDeviceName
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.ModelName">
            <summary>
            type of device
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.SerialNumber">
            <summary>
            serial number
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.LockStatus">
            <summary>
            lock status (locked or unlocked)
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.IpAddress">
            <summary>
            ip address of the device
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.MacAddress">
            <summary>
            mac address of the device
            </summary>
        </member>
        <member name="T:Attocube.API.AttocubeAPI">
            <summary>
            AttocubeAPI implementation class
            </summary>
        </member>
        <member name="F:Attocube.API.AttocubeAPI._baseUrl">
            <summary>
            Base-URL for the web service call
            </summary>
        </member>
        <member name="P:Attocube.API.AttocubeAPI.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="P:Attocube.API.AttocubeAPI.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.#ctor">
            <summary>
            Standard, parameter-less constructor - will create a standard, real JsonRpcClient when needed
            </summary>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.#ctor(Attocube.API.JsonRpc.IJsonRpcClient)">
            <summary>
            Extended constructor, which takes a pre-made IJsonRpcClient (possibly a mock for testing)
            and does not internally create a standard, real-life "JsonRpcClient" instance
            </summary>
            <param name="rpcClient">Ready-made "IJsonRpcClient" (possibly a mock for unit testing)</param>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.Connect(System.String,System.Int32)">
            <summary>
            Connect to the target with a hostname or IP address and port provided.
            If a valid port number (> 0) is supplied, the target URL is constructed like this:
                 http://$(ipAddress):$(port)/api/json
            If an invalid port number (0 or negative value) is supplied, then the string in "ipAddress" is taken
            as the literal string for the base service URL (used for e.g. testing)
            </summary>
            <param name="ipAddress">IP Address for target system</param>
            <param name="port">Port</param>
            <exception cref="T:Attocube.API.Error.AlreadyConnectedException">Thrown if the client is already connected</exception>
            <exception cref="T:System.ArgumentException">Thrown if the supplied IP address is invalid</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.Disconnect">
            <summary>
            Disconnect from the target system
            </summary>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.GetDllVersion">
            <summary>
            Returns the current version of the Attocube API DLL
            </summary>
            <returns>Version in the form X.Y.Z</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallNoReturnValues(System.Boolean,System.Object[])">
            <summary>
            Calls the API with no return values
            </summary>
            <returns>Return value</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallOneReturnValue``1(System.Boolean,System.Object[])">
            <summary>
            Calls the API with one return value
            </summary>
            <returns>Return value</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallTwoReturnValues``2(System.Boolean,System.Object[])">
            <summary>
            Calls the API with two return values
            </summary>
            <returns>Return tuple of two values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallThreeReturnValues``3(System.Boolean,System.Object[])">
            <summary>
            Calls the API with three return values
            </summary>
            <returns>Return tuple of three values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallFourReturnValues``4(System.Boolean,System.Object[])">
            <summary>
            Calls the API with four return values
            </summary>
            <returns>Return tuple of four values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallFiveReturnValues``5(System.Boolean,System.Object[])">
            <summary>
            Calls the API with five return values
            </summary>
            <returns>Return tuple of five values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallSixReturnValues``6(System.Boolean,System.Object[])">
            <summary>
            Calls the API with six return values
            </summary>
            <returns>Return tuple of six values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallSevenReturnValues``7(System.Boolean,System.Object[])">
            <summary>
            Calls the API with seven return values
            </summary>
            <returns>Return tuple of seven values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallEightReturnValues``8(System.Boolean,System.Object[])">
            <summary>
            Calls the API with eight return values
            </summary>
            <returns>Return tuple of seven values, the last value is a tuple again. The tuple can't handle more columns.</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallNineReturnValues``9(System.Boolean,System.Object[])">
            <summary>
            Calls the API with nine return values
            </summary>
            <returns>Return tuple of seven values, the last value is a tuple again. The tuple can't handle more columns.</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse0(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically an "int", "bool" or "string"</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse1``1(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically an "int", "bool" or "string"</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse2``2(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 2-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse3``3(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 3-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse4``4(Attocube.API.JsonRpc.JsonRpcResponse,System.Boolean)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 4-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse5``5(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 5-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse6``6(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 6-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse7``7(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <typeparam name="T7">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 7-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse8``8(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <typeparam name="T7">Expected type of the return value </typeparam>
            <typeparam name="T8">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 7-tuple of "int", "bool" or "string" values. The last value is a tuple of addional values. </returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse9``9(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <typeparam name="T7">Expected type of the return value </typeparam>
            <typeparam name="T8">Expected type of the return value </typeparam>
            <typeparam name="T9">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 7-tuple of "int", "bool" or "string" values. The last value is a tuple of addional values. </returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.Check">
            <summary>
            Discover Attocube Devices on the network
            </summary>
            <returns>Array of discovery data describing, name, type, serialNumber, ip address, mac address and lock status</returns>
        </member>
        <member name="T:Attocube.API.JsonRpc.IJsonRpcClient">
            <summary>
            Interface defining the methods that the JSON RPC client must provide
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.IJsonRpcClient.ExecuteRpcCall(Attocube.API.JsonRpc.JsonRpcRequest,System.Boolean)">
            <summary>
            Methode to execute a single JSON RPC call
            </summary>
            <param name="jsonRequest">All necessary request parameters</param>
            <param name="longRequest">Indicates if the timeout timer should be adjusted to wait longer than normal requests</param>
            <returns>A JsonResponse object containing the result of the operation</returns>
        </member>
        <member name="M:Attocube.API.JsonRpc.IJsonRpcClient.close">
            <summary>
            Close any remaining connection
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.IJsonRpcClient.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.IJsonRpcClient.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcClient">
            <summary>
            Concrete implementation of the IJsonRpcClient interface
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClient.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClient.close">
            <summary>
            Close aany Connection
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClient.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClient.#ctor(System.String)">
            <summary>
            Constructor for the client class
            </summary>
            <param name="baseUrl">Base URL for the JSON RPC calls</param>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClient.ExecuteRpcCall(Attocube.API.JsonRpc.JsonRpcRequest,System.Boolean)">
            <summary>
            Execute a single JSON RPC call
            </summary>
            <param name="jsonRequest">All the relevant request parameters, bundled up into a request object</param>
            <param name="longRequest">Indicates if the timeout timer should be adjusted to wait longer than normal requests</param>
            <returns>A JsonResponse object with the response (and possibly error) from the call made</returns>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcClientTcp">
            <summary>
            Concrete implementation of the IJsonRpcClient interface
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClientTcp.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClientTcp.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClientTcp.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for the client class
            </summary>
            <param name="ip">Ip address of the target</param>
            <param name="port">Port to connect to</param>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClientTcp.close">
            <summary>
            Close the Client
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClientTcp.ExecuteRpcCall(Attocube.API.JsonRpc.JsonRpcRequest,System.Boolean)">
            <summary>
            Execute a single JSON RPC call
            </summary>
            <param name="jsonRequest">All the relevant request parameters, bundled up into a request object</param>
            <param name="longRequest">Indicates if the timeout timer should be adjusted to wait longer than normal requests</param>
            <returns>A JsonResponse object with the response (and possibly error) from the call made</returns>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcError">
            <summary>
            Possible JsonRPC error that can occur
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.Code">
            <summary>
            A numeric error code
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.Data">
            <summary>
            Additional data for the error (depends on context)
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.InnerException">
            <summary>
            Possible inner .NET exception
            </summary>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcRequest">
            <summary>
            JSON RPC request class
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcRequest.#ctor">
            <summary>
            Standard constructor - sets the "JsonRpc" property to "2.0" and initializes the "Parameters" array
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcRequest.#ctor(System.String)">
            <summary>
            Extended constructor, which also takes the JSON RPC method to call as a parameter
            </summary>
            <param name="methodName">Name of the RPC method to call</param>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.JsonRpc">
            <summary>
            "JsonRpc" marker for the requests - must be set to "2.0" for JSON RPC v2.0
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.Method">
            <summary>
            Method to call - depends on the JSON RPC host being called
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.Id">
            <summary>
            Internal "id" - should be unique for each request, will be returned in response to allow matching
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.Parameters">
            <summary>
            Array of positional parameters for the JSON RPC call
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.api">
            <summary>
            API version. Should be 2
            </summary>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcResponse">
            <summary>
            JSON RPC response class
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcResponse.#ctor">
            <summary>
            Standard constructor, sets the "JsonRpc" property to "2.0" for JSON RPC v2.0
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.JsonRpc">
            <summary>
            "JsonRpc" marker for the requests - must be set to "2.0" for JSON RPC v2.0
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.Result">
            <summary>
            Arbitrary result object - could be a string, an int, an object type - depends on the call
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.Id">
            <summary>
            Internal "id" received from the request
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.Error">
            <summary>
            Possible error - if left NULL, then there's no error
            </summary>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GrantAccess(System.String)">
            <summary>
            Grants access to a locked device for the requesting IP by checking against the password
            </summary>
            <param name="password">string the current password</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Lock(System.String)">
            <summary>
            This function locks the device with a password, so the calling of functions is only possible with this password. The locking IP is automatically added to the devices which can access functions
            </summary>
            <param name="password">string the password to be set</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Unlock(System.String)">
            <summary>
            This function unlocks the device, so it will not be necessary to execute the grantAccess function to run any function
            </summary>
            <param name="password">string the current password</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_GetLowerSoftLimit(System.Int32)">
            <summary>
            Gets the lower boundary of the soft limit protection.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC to get the soft limit status from</param>
            <returns>
            limit: doubleLower boundary in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_GetSoftLimitEnabled(System.Int32)">
            <summary>
            Gets whether the soft limit protection is enabled.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC to get the soft limit status from</param>
            <returns>
            enabled: booleanTrue, if the soft limit should be enabled on this axis
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_GetSoftLimitReached(System.Int32)">
            <summary>
            Gets whether the current position is out of the soft limit boundaries.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC to get the soft limit status from</param>
            <returns>
            enabled: booleanTrue, if the position is not within the boundaries
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_GetUpperSoftLimit(System.Int32)">
            <summary>
            Gets the upper lower boundary of the soft limit protection.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC to get the soft limit status from</param>
            <returns>
            limit: doubleUpper boundary in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_ResetIdsAxis(System.Int32)">
            <summary>
            Resets the position value to zero of a specific measurement axis.
            Use this for positioners with an IDS as sensor.
            This method does not work for NUM and RES sensors. Use com.attocube.amc.control.resetAxis instead.
            </summary>
            <param name="axis">Axis of the IDS to reset the position</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_SetLowerSoftLimit(System.Int32,System.Double)">
            <summary>
            Sets the lower boundary of the soft limit protection in pm.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC where the soft limit should be changed</param>
            <param name="limit">Lower boundary in pm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_SetSoftLimitEnabled(System.Int32,System.Boolean)">
            <summary>
            Enables/disables the soft limit protection.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC where the soft limit should be changed</param>
            <param name="enabled">True, if the soft limit should be enabled on this axis</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Amcids_SetUpperSoftLimit(System.Int32,System.Double)">
            <summary>
            Sets the upper boundary of the soft limit protection in pm.
            This protection is needed if the IDS working range is smaller than the positioners travel range.
            It is no hard limit, so, it is possible to overshoot it!
            </summary>
            <param name="axis">Axis of the AMC where the soft limit should be changed</param>
            <param name="limit">Upper boundary in pm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_MultiAxisPositioning(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Simultaneously set 3 axes positions
            and get positions to minimize network latency
            </summary>
            <param name="set1">axis1 otherwise pos1 target is ignored</param>
            <param name="set2">axis2 otherwise pos2 target is ignored</param>
            <param name="set3">axis3 otherwise pos3 target is ignored</param>
            <param name="target1">target position of axis 1</param>
            <param name="target2">target position of axis 2</param>
            <param name="target3">target position of axis 3</param>
            <returns>
            ref1: ref1 Status of axis 1
            ref2: ref2 Status of axis 2
            ref3: ref3 Status of axis 3
            refpos1: refpos1 reference Position of axis 1
            refpos2: refpos2 reference Position of axis 2
            refpos3: refpos3 reference Position of axis 3
            pos1: pos1 position of axis 1
            pos2: pos2 position of axis 2
            pos3: pos3 position of axis 3
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetActorName(System.Int32)">
            <summary>
            This function gets the name of the positioner of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            actor_name: actor_name
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetActorParametersActorName(System.Int32)">
            <summary>
            Control the actors parameter: actor name
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            actorname: actorname
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetActorType(System.Int32)">
            <summary>
            This function gets the type of the positioner of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            actor_type: actor_type  0: linear , 1: goniometer, 2: rotator
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetAutoMeasure(System.Int32)">
            <summary>
            This function returns if the automeasurement on axis enable is enabled
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            enable: enable boolean  true: enable automeasurement, false: disable automeasurement
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlAmplitude(System.Int32)">
            <summary>
            This function gets the amplitude of the actuator signal of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            amplitude: amplitude in mV
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlAutoReset(System.Int32)">
            <summary>
            This function resets the position every time the reference position is detected.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            enabled: enabled boolean
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlFixOutputVoltage(System.Int32)">
            <summary>
            This function gets the DC level output of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            amplitude_mv: amplitude_mv in mV
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlFrequency(System.Int32)">
            <summary>
            This function gets the frequency of the actuator signal of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            frequency: frequency in mHz
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlMove(System.Int32)">
            <summary>
            This function gets the approach of the selected axis’ positioner to the target position.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            enable: enable boolean true: closed loop control enabled, false: closed loop control disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlOutput(System.Int32)">
            <summary>
            This function gets the status of the output relays of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean power status (true = enabled,false = disabled)
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlReferenceAutoUpdate(System.Int32)">
            <summary>
            This function gets the status of whether the reference position is updated when the reference mark is hit.
            When this function is disabled, the reference marking will be considered only the first time and after then ignored.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            enabled: enabled boolen
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetControlTargetRange(System.Int32)">
            <summary>
            This function gets the range around the target position in which the flag "In Target Range" becomes active.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            targetrange: targetrange in nm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetCrosstalkThreshold(System.Int32)">
            <summary>
            This function gets the threshold range and slip phase time which is used while moving another axis
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            range: range in pm
            time: time after slip phase which is waited until the controller is acting again in microseconds
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetCurrentOutputVoltage(System.Int32)">
            <summary>
            This function gets the current Voltage which is applied to the Piezo
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            amplitude: amplitude in mV
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetExternalSensor(System.Int32)">
            <summary>
            This function gets whether the sensor source of closed loop is IDS
            It is only available when the feature AMC/IDS closed loop has been activated
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            enabled: enabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetMotionControlThreshold(System.Int32)">
            <summary>
            This function gets the threshold range within the closed-loop controlled movement stops to regulate.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            range: range in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetPositionsAndVoltages">
            <summary>
            Simultaneously get 3 axes positions as well as the DC offset
            to maximize sampling rate over network
            </summary>
            <returns>
            pos1: pos1 position of axis 1
            pos2: pos2 position of axis 2
            pos3: pos3 position of axis 3
            val1: val1 dc voltage of of axis 1 in mV
            val2: val2 dc voltage of of axis 2 in mV
            val3: val3 dc voltage of of axis 3 in mV
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetReferencePosition(System.Int32)">
            <summary>
            This function gets the reference position of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            position: position: For linear type actors the position is defined in nm for goniometer an rotator type actors it is µ°.
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetSensorDirection(System.Int32)">
            <summary>
            This function gets whether the IDS sensor source of closed loop is inverted
            It is only available when the feature AMC/IDS closed loop has been activated
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            inverted: inverted boolen
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetSensorEnabled(System.Int32)">
            <summary>
            Get sensot power supply status
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value: value true if enabled, false otherwise
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_GetStatusMovingAllAxes">
            <summary>
            Get Status of all axes, see getStatusMoving for coding of the values
            </summary>
            <returns>
            moving1: moving1 status of axis 1
            moving2: moving2 status of axis 2
            moving3: moving3 status of axis 3
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SearchReferencePosition(System.Int32)">
            <summary>
            This function searches for the reference position of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetActorParametersByName(System.Int32,System.String)">
            <summary>
            This function sets the name for the positioner on the selected axis. The possible names can be retrieved by executing getPositionersList.vi
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="actorname">name of the actor</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetActorParametersJson(System.Int32,System.String)">
            <summary>
            Select and override a positioner out of the Current default list only override given parameters set others default
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="json_dict">dict with override params</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetAutoMeasure(System.Int32,System.Boolean)">
            <summary>
            This function enables/disables the automatic C/R measurement on axis enable
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean  true: enable automeasurement, false: disable automeasurement</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlAmplitude(System.Int32,System.Int32)">
            <summary>
            This function sets the amplitude of the actuator signal of the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="amplitude">in mV</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlAutoReset(System.Int32,System.Boolean)">
            <summary>
            This function resets the position every time the reference position is detected.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlFixOutputVoltage(System.Int32,System.Int32)">
            <summary>
            This function sets the DC level output of the selected axis. ( must perform  applyControlFixOutputVoltage to apply on the positioner)
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="amplitude_mv">in mV</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlFrequency(System.Int32,System.Int32)">
            <summary>
            This function sets the frequency of the actuator signal of the selected axis.
            Note: Approximate the slewrate of the motion controller  according to Input Frequency
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="frequency">in  mHz</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlMove(System.Int32,System.Boolean)">
            <summary>
            This function sets the approach of the selected axis’ positioner to the target position.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean true: eanble the approach , false: disable the approach</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlOutput(System.Int32,System.Boolean)">
            <summary>
            This function sets the status of the output relays of the selected axis.
            Enable only if cable is connected and FlyBack is enabled
            use a PWM startup of 1sec
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean  true: enable drives, false: disable drives</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlReferenceAutoUpdate(System.Int32,System.Boolean)">
            <summary>
            This function sets the status of whether the reference position is updated when the reference mark is hit.
            When this function is disabled, the reference marking will be considered only the first time and after then ignored.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetControlTargetRange(System.Int32,System.Int32)">
            <summary>
            This function sets the range around the target position in which the flag "In Target Range" (see VIII.7.a) becomes active.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="range">in nm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetCrosstalkThreshold(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function sets the threshold range and slip phase time which is used while moving another axis
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="threshold">in pm</param>
            <param name="slipphasetime">time after slip phase which is waited until the controller is acting again in microseconds</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetExternalSensor(System.Int32,System.Boolean)">
            <summary>
            This function sets the sensor source of closed loop to the IDS when enabled. Otherwise the normal AMC Sensor depending on the configuration (e.g. NUM or RES) is used
            It is only available when the feature AMC/IDS closed loop has been activated
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enabled">boolean</param>
            <returns>
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetMotionControlThreshold(System.Int32,System.Int32)">
            <summary>
            This function sets the threshold range within the closed-loop controlled movement stops to regulate. Default depends on connected sensor type
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="threshold">in pm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetReset(System.Int32)">
            <summary>
            This function resets the actual position of the selected axis given by the NUM sensor to zero and marks the reference position as invalid.
            It does not work for RES positioners and positions read by IDS.
            For IDS, use com.attocube.ids.displacement.resetAxis() or com.attocube.amc.amcids.resetIdsAxis() instead.
            </summary>
            <param name="axis">[0|1|2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetSensorDirection(System.Int32,System.Boolean)">
            <summary>
            This function sets the IDS sensor source of closed loop to inverted when true.
            It is only available when the feature AMC/IDS closed loop has been activated
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="inverted"></param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Control_SetSensorEnabled(System.Int32,System.Boolean)">
            <summary>
            Set sensor power supply status, can be switched off to save heat generated by sensor [NUM or RES]
            Positions retrieved will be invalid when activating this, so closed-loop control should be switched off beforehand
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="value">true if enabled, false otherwise</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Description_CheckChassisNbr">
            <summary>
            Get Chassis and Slot Number, only works when AMC is within a Rack
            </summary>
            <returns>
            slotNbr: slotNbr
            chassisNbr: chassisNbr
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Description_GetDeviceType">
            <summary>
            This function gets the device type based on its EEPROM configuration.
            </summary>
            <returns>
            devicetype: devicetype Device name (AMC100, AMC300) with attached feature ( AMC100\\NUM, AMC100\\NUM\\PRO)
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Description_GetFeaturesActivated">
            <summary>
            Get the activated features and return as a string
            </summary>
            <returns>
            features: features activated on device concatenated by comma e.g. Closed loop Operation, Pro, Wireless Controller, IO
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Description_GetPositionersList">
            <summary>
            This function reads the actor names that can be connected to the device.
            </summary>
            <returns>
            PositionersList: PositionersList
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Disagnostic_GetDiagnosticPower(System.Int32)">
            <summary>
            Returns the current power consumption
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            power: power
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Disagnostic_GetDiagnosticResults(System.Int32)">
            <summary>
            Returns the results of the last diagnostic run and an error, if there was no run, it is currently running or the run failed
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            capacity: capacity in nF
            resistance: resistance in Ohm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Disagnostic_GetDiagnosticTemperature(System.Int32)">
            <summary>
            Returns the current axis temperature
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            temperature: temperature
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Disagnostic_StartDiagnostic(System.Int32)">
            <summary>
            Start the diagnosis procedure for the given axis
            </summary>
            <param name="axis">[0|1|2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetControlContinuousBkwd(System.Int32)">
            <summary>
            This function gets the axis’ movement status in backward direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean true if movement backward is active , false otherwise
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetControlContinuousFwd(System.Int32)">
            <summary>
            This function gets the axis’ movement status in positive direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean true if movement Fwd is active , false otherwise
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetControlEotOutputDeactive(System.Int32)">
            <summary>
            This function gets the output applied to the selected axis on the end of travel.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean If true, the output of the axis will be deactivated on positive EOT detection.
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetControlTargetPosition(System.Int32)">
            <summary>
            This function gets the target position for the movement on the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            position: position defined in nm for goniometer an rotator type actors it is µ°.
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetGroundAxis(System.Int32)">
            <summary>
            Pull axis piezo drive to GND actively
            only in AMC300
            </summary>
            <param name="axis">montion controler axis [0|1|2]</param>
            <returns>
            grounded: grounded true or false
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetGroundAxisAutoOnTarget(System.Int32)">
            <summary>
            Pull axis piezo drive to GND if positioner is in ground target range
            ONLY DUMMY RIGHT NOW
            only in AMC300
            </summary>
            <param name="axis">montion controler axis [0|1|2]</param>
            <returns>
            value: value true or false
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetGroundTargetRange(System.Int32)">
            <summary>
            Retrieves the range around the target position in which the auto grounding becomes active.
            only in AMC300
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            targetrange: targetrange in nm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetNSteps(System.Int32)">
            <summary>
            This function gets the number of Steps in desired direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            nbrstep: nbrstep
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_GetPosition(System.Int32)">
            <summary>
            This function gets the current position of the positioner on the selected axis.
            The axis on the web application are indexed from 1 to 3
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            position: position defined in nm for goniometer an rotator type actors it is µ°.
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_PerformNSteps(System.Int32,System.Boolean)">
            <summary>
            Perform the OL command for N steps
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="backward">Selects the desired direction. False triggers a forward step, true a backward step</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetControlContinuousBkwd(System.Int32,System.Boolean)">
            <summary>
            This function sets a continuous movement on the selected axis in backward direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">If enabled a present movement in the opposite direction is stopped. The parameter "false" stops all movement of the axis regardless its direction</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetControlContinuousFwd(System.Int32,System.Boolean)">
            <summary>
            This function sets a continuous movement on the selected axis in positive direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">If enabled a present movement in the opposite direction is stopped. The parameter "false" stops all movement of the axis regardless its direction.</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetControlEotOutputDeactive(System.Int32,System.Boolean)">
            <summary>
            This function sets the output applied to the selected axis on the end of travel.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean  If enabled, the output of the axis will be deactivated on positive EOT detection.</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetControlTargetPosition(System.Int32,System.Double)">
            <summary>
            This function sets the target position for the movement on the selected axis.
            careful: the maximum positon in nm is 2**47/1000
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="target">absolute position : For linear type actors the position is defined in nm for goniometer an rotator type actors it is µ°.</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetGroundAxis(System.Int32,System.Boolean)">
            <summary>
            Pull axis piezo drive to GND actively
            only in AMC300
            this is used in MIC-Mode
            </summary>
            <param name="axis">motion controler axis [0|1|2]</param>
            <param name="enabled">true or false</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetGroundAxisAutoOnTarget(System.Int32,System.Boolean)">
            <summary>
            Pull axis piezo drive to GND if positioner is in ground target range
            ONLY DUMMY RIGHT NOW
            only in AMC300
            this is used in MIC-Mode
            </summary>
            <param name="axis">montion controler axis [0|1|2]</param>
            <param name="enabled">true or false</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetGroundTargetRange(System.Int32,System.Int32)">
            <summary>
            Set  the range around the target position in which the auto grounding becomes active.
            only in AMC300
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="range">in nm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_SetNSteps(System.Int32,System.Boolean,System.Int32)">
            <summary>
            This function triggers n steps on the selected axis in desired direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="backward">Selects the desired direction. False triggers a forward step, true a backward step</param>
            <param name="step">number of step</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Move_WriteNSteps(System.Int32,System.Int32)">
            <summary>
            set N steps
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="step">number of step</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_GetChainGain(System.Int32)">
            <summary>
            Get chain gain
            </summary>
            <param name="axis">number of axis</param>
            <returns>
            gaincoeff: gaincoeff
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_GetLinearization">
            <summary>
            Gets wether linearization is enabled or not
            </summary>
            <returns>
            enabled: enabled true when enabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_GetLutSn(System.Int32)">
            <summary>
            get the identifier of the loaded lookuptable (will be empty if disabled)
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_string1: string : identifier
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_GetMode">
            <summary>
            Get mode of RES application
            </summary>
            <returns>
            mode: mode
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_SetChainGain(System.Int32,System.Int32)">
            <summary>
            Set signal chain gain to control overall power
            </summary>
            <param name="axis">number of axis</param>
            <param name="gainconfig">0: 0dB ( power 600mVpkpk^2/R), 1 : -10 dB , 2 : -15 dB , 3 : -20 dB</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_SetConfigurationFile(System.Int32,System.String)">
            <summary>
            Load configuration file which either contains JSON parameters or the LUT file itself (as legacy support)
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="content">1k * 24 bit string or JSON File</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_SetLinearization(System.Boolean)">
            <summary>
            Control if linearization is enabled or not
            </summary>
            <param name="enable">boolean ( true: enable linearization)</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Res_SetMode(System.Int32)">
            <summary>
            Get mode of RES application
            </summary>
            <param name="mode">1: Individual mode with triple ortho frequency rejection method 2: Mic Mode with dual frequency  rejection method</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rotcomp_GetControlTargetRanges">
            <summary>
            Checks if all three axis are in target range.
            </summary>
            <returns>
            in_target_range: booleantrue all three axes are in target range, false at least one axis is not in target range
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rotcomp_GetEnabled">
            <summary>
            Gets the enabled status of the rotation compensation
            </summary>
            <returns>
            enabled: booleantrue Rotation compensation is enabled, false Rotation compensation is disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rotcomp_GetLUT">
            <summary>
            Gets the LUT file as JSON string
            </summary>
            <returns>
            lut: stringJSON string of the LUT file for the rotation compensation
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rotcomp_SetEnabled(System.Boolean)">
            <summary>
            Enables and disables the rotation compensation
            </summary>
            <param name="enabled">true Rotation compensation is enabled, false Rotation compensation is disabled</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rotcomp_SetLUT(System.String)">
            <summary>
            Sets the LUT file from a JSON string
            </summary>
            <param name="lut_string">JSON string of the LUT file for the rotation compensation</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rotcomp_UpdateOffsets(System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the start offsets of the axes
            </summary>
            <param name="offset_axis0">Offset of axis 1 in [nm]</param>
            <param name="offset_axis1">Offset of axis 2 in [nm]</param>
            <param name="offset_axis2">Offset of axis 3 in [nm]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_Apply">
            <summary>
            Apply all realtime input function
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_Discard">
            <summary>
            Discard all values beting set and not yet applieds
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetControlAQuadBIn(System.Int32)">
            <summary>
            check if  AQuadB input is enabled. NOT USED
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetControlAQuadBInResolution(System.Int32,System.Boolean)">
            <summary>
            This function gets the AQuadB input resolution for setpoint parameter.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean if true get the tempory value ( from the set function)</param>
            <returns>
            resolution: resolution ion nm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetControlMoveGPIO(System.Int32)">
            <summary>
            This function gets the status for real time input on the selected axis in closed-loop mode.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            enable: enable boolean true: approach enabled , false: approach disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetGpioMode">
            <summary>
            get the GPIO mode for Mic Mode feature
            </summary>
            <returns>
            gpio_mode: gpio_mode: 0: Standard GPIO 1: NSL-/Mic-Mode
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetNslMux(System.Int32)">
            <summary>
            get the axis the NSL multiplexer is set to
            </summary>
            <param name="mux_mode">[0|1|2|3]0: Off1: Axis 12: Axis 23: Axis 3</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInChangePerPulse(System.Int32,System.Boolean)">
            <summary>
            This function gets the change per pulse for the selected axis under real time input in the closed-loop mode.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean     if true get the tempory value ( from the set function)</param>
            <returns>
            resolution: resolution to be added in current pos in nm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInFeedbackLoopMode(System.Int32,System.Boolean)">
            <summary>
            Get if the realtime function must operate in close loop operation or open loop operation
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean    if true get the tempory value ( from the set function)</param>
            <returns>
            mode: mode 0: open loop, 1 : close-loop
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInHsslClk(System.Int32,System.Boolean)">
            <summary>
            Get the HSSL clock
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean     if true get the tempory value ( from the set function)</param>
            <returns>
            clk: clk  clock  is given in nanoseconds
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInHsslGap(System.Int32,System.Boolean)">
            <summary>
            Get the HSSL Gap
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean     if true get the tempory value ( from the set function)</param>
            <returns>
            gap: gap indicates the gap between the end of the HSSL word  and the beginning of the next HSSL word. The unit of G is HSSL clock cycles.
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInHsslHigh(System.Int32,System.Boolean)">
            <summary>
            Get the higher part of the HSSL resolution
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean    if true get the tempory value ( from the set function)</param>
            <returns>
            highresolution: highresolution
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInHsslLow(System.Int32,System.Boolean)">
            <summary>
            Get the lower part of the HSSL resolution
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean   if true get the tempory value ( from the set function)</param>
            <returns>
            lowresolution: lowresolution
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInMode(System.Int32,System.Boolean)">
            <summary>
            This function sets or gets the real time input mode for the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean   if true get the tempory value ( from the set function)</param>
            <returns>
            mode: mode see `RT_IN_MODES`
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_GetRealTimeInStepsPerPulse(System.Int32,System.Boolean)">
            <summary>
            Get the change in step per pulse  of the realtime input when trigger and stepper mode is used
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean     if true get the tempory value ( from the set function)</param>
            <returns>
            steps: steps number of steps to applied
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetControlAQuadBIn(System.Int32,System.Boolean)">
            <summary>
            AQuadB input  enable.   NOT USED
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable"></param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetControlAQuadBInResolution(System.Int32,System.Int32)">
            <summary>
            This function sets the AQuadB input resolution for setpoint parameter.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="resolution">ion nm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetControlMoveGPIO(System.Int32,System.Boolean)">
            <summary>
            This function sets the status for real time input on the selected axis in closed-loop mode.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="enable">boolean true: eanble the approach , false: disable the approach</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetGpioMode(System.Int32)">
            <summary>
            set the GPIO mode for Mic Mode feature
            </summary>
            <param name="gpio_mode">[0|1]0: Standard GPIO1: NSL-/Mic-Mode</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetNslMux(System.Int32)">
            <summary>
            set the axis the NSL multiplexer is set to
            </summary>
            <param name="mux_mode">[0|1|2|3]0: Off1: Axis 12: Axis 23: Axis 3</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInChangePerPulse(System.Int32,System.Int32)">
            <summary>
            This function sets the change per pulse for the selected axis under real time input in the closed-loop mode.
            only used in closed loop operation
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="resolution">to be added in current pos in nm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInFeedbackLoopMode(System.Int32,System.Int32)">
            <summary>
            Set if the realtime function must operate in close loop operation or open loop operation
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="mode">0: open loop, 1 : close-loop</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInHsslClk(System.Int32,System.Int32)">
            <summary>
            Set the HSSL clock
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="hssl_clk">clock  is given in nanoseconds: N = data/40 - 1</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInHsslGap(System.Int32,System.Int32)">
            <summary>
            Set the HSSL Gaps
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="hssl_gap">indicates the gap between the end of the HSSL word and the beginning of the next HSSL word in units of HSSL clock cycles.</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInHsslHigh(System.Int32,System.Int32)">
            <summary>
            Set the higher part of the HSSL resolution
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="resohigh"></param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInHsslLow(System.Int32,System.Int32)">
            <summary>
            Set the lower part of the HSSL resolution
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="resolow"></param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInMode(System.Int32,System.Int32)">
            <summary>
            This function sets the real time input mode for the selected axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="mode">see `RT_IN_MODES` @see realtime</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtin_SetRealTimeInStepsPerPulse(System.Int32,System.Int32)">
            <summary>
            Set the change in step per pulse  of the realtime input when trigger and stepper mode is used
            only used in open loop operation
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="steps">number of steps to applied</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_Apply">
            <summary>
            Apply for all rtout function
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_ApplyAxis(System.Int32)">
            <summary>
            Apply for rtout function of specific axis
            </summary>
            <param name="axis">[0|1|2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_Discard">
            <summary>
            Discard all rtout value set by the set function(not applied yet)
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_DiscardAxis(System.Int32)">
            <summary>
            Discard rtout value of specific axis set by the set function(not applied yet)
            </summary>
            <param name="axis">[0|1|2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_DiscardSignalMode">
            <summary>
            Discard value set by setSignalMode
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_GetControlAQuadBOut(System.Int32,System.Int32)">
            <summary>
            This function gets status of AQuadB output for position indication.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean if true get the tempory value ( from the set function)</param>
            <returns>
            value_boolean1: boolean
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_GetControlAQuadBOutClock(System.Int32,System.Boolean)">
            <summary>
            This function gets the clock for AQuadB output.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean  if true get the tempory value ( from the set function)</param>
            <returns>
            clock_in_ns: clock_in_ns Clock in multiples of 20ns. Minimum 2 (40ns), maximum 65535 (1,310700ms)
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_GetControlAQuadBOutResolution(System.Int32,System.Boolean)">
            <summary>
            This function gets the AQuadB output resolution for position indication.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean    if true get the tempory value ( from the set function)</param>
            <returns>
            resolution: resolution in nm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_GetMode(System.Int32,System.Boolean)">
            <summary>
            Get Mode
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue"></param>
            <returns>
            mode: mode 0: Off, 1: AquadB, 2: Trigger
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_GetSignalMode(System.Boolean)">
            <summary>
            This function gets the real time output mode for the selected axis.
            </summary>
            <param name="tempvalue"></param>
            <returns>
            mode: mode 0: TTL, 1: LVDS
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_GetTriggerConfig(System.Int32,System.Boolean)">
            <summary>
            Get the real time output trigger config
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="tempvalue">boolean</param>
            <returns>
            higher: higher upper limit in nm / µdeg
            lower: lower lower limit in nm / µdeg
            epsilon: epsilon hysteresis in nm / µdeg
            polarity: polarity 0: active high, 1: active low
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_SetControlAQuadBOutClock(System.Int32,System.Int32)">
            <summary>
            This function sets the clock for AQuadB output.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="clock">Clock in multiples of 20ns. Minimum 2 (40ns), maximum 65535 (1,310700ms)</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_SetControlAQuadBOutResolution(System.Int32,System.Int32)">
            <summary>
            This function sets the AQuadB output resolution for position indication.
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="resolution">in nm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_SetMode(System.Int32,System.Int32)">
            <summary>
            Set the real time output signal mode
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="mode">0: Off, 1: AquadB, 2: Trigger</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_SetSignalMode(System.Int32)">
            <summary>
            This function sets the real time output mode for the selected axis.
            </summary>
            <param name="mode">0: TTL, 1: LVDS</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Rtout_SetTriggerConfig(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Control the real time output trigger config
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="higher">upper limit in nm / µdeg</param>
            <param name="lower">lower limit in nm / µdeg</param>
            <param name="epsilon">hysteresis in nm / µdeg</param>
            <param name="polarity">0: active high, 1: active low</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetFullCombinedStatus(System.Int32)">
            <summary>
            Get the full combined status of a positioner axis and return the status as a string (to be used in the Webapplication)
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_string1: string can be "moving","in target range", "backward limit reached", "forward limit reached", "positioner not connected", "output not enabled"
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetOlStatus(System.Int32)">
            <summary>
            Get the Feedback status of the positioner
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            sensorstatus: sensorstatus as integer 0: NUM Positioner connected 1: OL positioner connected  2: No positioner connected , 3: RES positione connected
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusConnected(System.Int32)">
            <summary>
            This function gets information about the connection status of the selected axis’ positioner.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean If true, the actor is connected
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusEot(System.Int32)">
            <summary>
            Retrieves the status of the end of travel (EOT) detection in backward direction or in forward direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean true= detected$
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusEotBkwd(System.Int32)">
            <summary>
            This function gets the status of the end of travel detection on the selected axis in backward direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean true= detected
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusEotFwd(System.Int32)">
            <summary>
            This function gets the status of the end of travel detection on the selected axis in forward direction.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean true= detected
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusMoving(System.Int32)">
            <summary>
            This function gets information about the status of the stage output.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            status: status 0: Idle, i.e. within the noise range of the sensor, 1: Moving, i.e the actor is actively driven by the output stage either for closed-loop approach or continous/single stepping and the output is active.2 : Pending means the output stage is driving but the output is deactivated
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusReference(System.Int32)">
            <summary>
            This function gets information about the status of the reference position.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean true= valid, false = not valid
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Status_GetStatusTargetRange(System.Int32)">
            <summary>
            This function gets information about whether the selected axis’ positioner is in target range or not.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            value_boolean1: boolean (true = within the target range, false: not ion the target range)
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.About_GetInstalledPackages">
            <summary>
            Get list of packages installed on the device
            </summary>
            <returns>
            value_string1: string: Comma separated list of packages
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.About_GetPackageLicense(System.String)">
            <summary>
            Get the license for a specific package
            </summary>
            <param name="pckg">string: Package name</param>
            <returns>
            value_string1: string: License for this package
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Apply">
            <summary>
            Apply temporary system configuration
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.ErrorNumberToRecommendation(System.Int32,System.Int32)">
            <summary>
            Get a recommendation for the error code
            </summary>
            <param name="language">integer: Language code</param>
            <param name="errNbr">interger: Error code to translate</param>
            <returns>
            value_string1: string: Error recommendation (currently returning an int = 0 until we have recommendations)
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.ErrorNumberToString(System.Int32,System.Int32)">
            <summary>
            Get a description of an error code
            </summary>
            <param name="language">integer: Language code 0 for the error name, 1 for a more user friendly error message</param>
            <param name="errNbr">interger: Error code to translate</param>
            <returns>
            value_string1: string: Error description
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.FactoryReset">
            <summary>
            Turns on the factory reset flag. To perform the factory reset, a reboot is necessary afterwards. All settings will be set to default and the IDS will be configured as DHCP server.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GetDeviceName">
            <summary>
            Get the actual device name
            </summary>
            <returns>
            value_string1: string: actual device name
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GetFirmwareVersion">
            <summary>
            Get the firmware version of the system
            </summary>
            <returns>
            value_string1: string: The firmware version
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GetFluxCode">
            <summary>
            Get the flux code of the system
            </summary>
            <returns>
            value_string1: string: flux code
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GetHostname">
            <summary>
            Return device hostname
            </summary>
            <returns>
            available: available
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GetMacAddress">
            <summary>
            Get the mac address of the system
            </summary>
            <returns>
            value_string1: string: Mac address of the system
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.GetSerialNumber">
            <summary>
            Get the serial number of the system
            </summary>
            <returns>
            value_string1: string: Serial number
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_Apply">
            <summary>
            Apply temporary IP configuration and load it
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_ConfigureWifi(System.Int32,System.String,System.String)">
            <summary>
            Change the wifi configuration and applies it
            </summary>
            <param name="wifi">mode: 0: Access point, 1: Wifi client</param>
            <param name="SSID"></param>
            <param name="psk">Pre-shared key</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_Discard">
            <summary>
            Discard temporary IP configuration
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetDefaultGateway">
            <summary>
            Get the default gateway of the device
            </summary>
            <returns>
            Default: Default gateway
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetDnsResolver(System.Int32)">
            <summary>
            Get the DNS resolver
            </summary>
            <param name="priority">of DNS resolver (Usually: 0 = Default, 1 = Backup)</param>
            <returns>
            IP: IP address of DNS resolver
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetEnableDhcpClient">
            <summary>
            Get the state of DHCP client
            </summary>
            <returns>
            value_boolean1: boolean: true = DHCP client enable, false = DHCP client disable
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetEnableDhcpServer">
            <summary>
            Get the state of DHCP server
            </summary>
            <returns>
            value_boolean1: boolean: true = DHCP server enable, false = DHCP server disable
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetIpAddress">
            <summary>
            Get the IP address of the device
            </summary>
            <returns>
            IP: IP address as string
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetProxyServer">
            <summary>
            Get the proxy settings of the devide
            </summary>
            <returns>
            Proxy: Proxy Server String, empty for no proxy
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetRealIpAddress">
            <summary>
            Get the real IP address of the device set to the network interface (br0, eth1 or eth0)
            </summary>
            <returns>
            IP: IP address as string
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetSubnetMask">
            <summary>
            Get the subnet mask of the device
            </summary>
            <returns>
            Subnet: Subnet mask as string
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetWifiMode">
            <summary>
            Get the operation mode of the wifi adapter
            </summary>
            <returns>
            wifi: wifi mode: 0: Access point, 1: Wifi client
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetWifiPassphrase">
            <summary>
            Get the the passphrase of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <returns>
            psk: psk Pre-shared key
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetWifiPresent">
            <summary>
            Returns is a Wifi interface is present
            </summary>
            <returns>
            True: True, if interface is present
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_GetWifiSSID">
            <summary>
            Get the the SSID of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <returns>
            SSID: SSID
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetDefaultGateway(System.String)">
            <summary>
            Set the default gateway of the device
            </summary>
            <param name="gateway">Default gateway as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetDnsResolver(System.Int32,System.String)">
            <summary>
            Set the DNS resolver
            </summary>
            <param name="priority">of DNS resolver (Usually: 0 = Default, 1 = Backup)</param>
            <param name="resolver">The resolver's IP address as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetEnableDhcpClient(System.Boolean)">
            <summary>
            Enable or disable DHCP client
            </summary>
            <param name="enable">boolean: true = enable DHCP client, false = disable DHCP client</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetEnableDhcpServer(System.Boolean)">
            <summary>
            Enable or disable DHCP server
            </summary>
            <param name="enable">boolean: true = enable DHCP server, false = disable DHCP server</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetIpAddress(System.String)">
            <summary>
            Set the IP address of the device
            </summary>
            <param name="address">IP address as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetProxyServer(System.String)">
            <summary>
            Set the proxy server of the device
            </summary>
            <param name="proxyServer">Proxy Server Setting as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetSubnetMask(System.String)">
            <summary>
            Set the subnet mask of the device
            </summary>
            <param name="netmask">Subnet mask as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetWifiMode(System.Int32)">
            <summary>
            Change the operation mode of the wifi adapter
            </summary>
            <param name="wifi">mode: 0: Access point, 1: Wifi client</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetWifiPassphrase(System.String)">
            <summary>
            Change the passphrase of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <param name="psk">Pre-shared key</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_SetWifiSSID(System.String)">
            <summary>
            Change the SSID of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <param name="SSID"></param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Network_Verify">
            <summary>
            Verify that temporary IP configuration is correct
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.RebootSystem">
            <summary>
            Reboot the system
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.SetDeviceName(System.String)">
            <summary>
            Set custom name for the device
            </summary>
            <param name="name">string: device name</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Update_GetLicenseUpdateProgress">
            <summary>
            Get the progress of running license update
            </summary>
            <returns>
            value_int1: int: progress in percent
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Update_GetSwUpdateProgress">
            <summary>
            Get the progress of running update
            </summary>
            <returns>
            value_int1: int: progress in percent
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Update_LicenseUpdateBase64">
            <summary>
            Execute the license update with base64 file uploaded. After execution, a manual reboot is nevessary.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Update_SoftwareUpdateBase64">
            <summary>
            Execute the update with base64 file uploaded. After completion, a manual reboot is necessary.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Update_UploadLicenseBase64(System.Int32,System.String)">
            <summary>
            Upload new license file in format base 64
            </summary>
            <param name="offset">int: offset of the data</param>
            <param name="b64Data">string: base64 data</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.AMC.AttocubeAMC.Update_UploadSoftwareImageBase64(System.Int32,System.String)">
            <summary>
            Upload new firmware image in format base 64
            </summary>
            <param name="offset">int: offset of the data</param>
            <param name="b64Data">string: base64 data</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
    </members>
</doc>
